1.不考虑复杂度：
  对于每个点，左找做大值，右找最大值，其收益等于max(0,min(左，右)-自高度)；
  其时间复杂度为O(n^2);
  
  实现代码：
  public int trap(int[] height) {
        int length = height.length;
        int water_counter=0;
        //iterator 
        for(int i=0;i<length;i++){
            //max height of left
            int max_left=0;
            for(int j=0;j<i;j++){
                if(height[j]>max_left){
                    max_left=height[j];
                }
            }
            
            //max height of right
            int max_right=0;
            for(int j=i;j<length;j++){
                if(height[j]>max_right){
                    max_right=height[j];
                }
            }
            
            //wather counter
            water_counter+=Math.max(0,Math.min(max_left,max_right)-height[i]);    
        }
        return water_counter;
    }
    
    结论：
      测试用例超时
      
2.分治思想
  为降低1的时间复杂度，思考后发现，不用对每一个点独立查找最大值，而是通过一个额外的空间，分别针对左和右向查找最大值即可；
  class Solution {
    public int trap(int[] height) {
         if(height==null || height.length<2)
            return 0;
        
        int length = height.length;
        int left_top=0;
        int right_top=0;
        int[][] top = new int[length][2];
        int water_counter=0;
        
        //iterator to find max_top 
        for(int i=0;i<length;i++){
            if(height[i] > left_top){
                left_top = height[i];
            }
            if(height[length - 1 - i] > right_top){
                right_top = height[length - 1 - i];
            }
            
            top[i][0] = left_top;  
            top[length - 1 - i][1] = right_top;  
        }
        
        //iterator to count water 
        for(int i=0;i<length;i++){
            water_counter += Math.max(0,Math.min(top[i][0],top[i][1])-height[i]);
        }
        return water_counter;
    }
}
